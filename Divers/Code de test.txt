
	/*
	// tests parse

	std::ifstream saveStream(wd / "save.txt");

	//string str;
	//char c;
	//while (!saveStream.eof())
	//{
	//	c = saveStream.get();
	//	str += c;
	//}

	Image i1, i2, i3, i4, i5;

	saveStream >> i1 >> i2 >> i3 >> i4 >> i5;

	return 0;
	//!tests parse
    */

	    /*
	 tests des const_iterator
	CollectionPool<Image> collection2 = std::move(createPoolFromDirectory(R"(D:\_Télécom Saint-Etienne\_Projets\mini projet\Dossier test)"));
	//const auto& ref = collection2;
	const Collection<Image>& ref = collection2;
	const Collection<Image>* ptr = &collection2;
	const FilteredCollection<Image> fcollec(collection2, [](const Image& img) {return img.getImgPtr()->height()>img.getImgPtr()->width(); });
	int i = 0;
	for(const auto& img : ref)
	{
		cout << "ref" << i << endl; ++i;
	}
	i = 0;
	for (const auto& img : *ptr)
	{
		cout << "ptr" << i << endl; ++i;
	}
	i = 0;
	for (const auto& img : fcollec)
	{
		cout << "fcollec" << i << endl; ++i;
	}
    */

	    
    /*
     //test affichage simpliste

	const unsigned int window_height = 1080U;
	const unsigned int window_width = 1920U;

	CImgDisplay main_disp(window_width, window_height, "titre super bien");

	static const double magick_ratio = 100 * 306 / 384;

	img temp_img(0U, 0, 1, 3U);
	for (size_t i = 0; i < 5; i++)
	{
		temp_img.append(list[i].resize(-magick_ratio, -magick_ratio), 'x', 0.5f);
	}

	img visu(1920, temp_img.height());
	//visu.fill('0','128','255','128','0');
	visu.fill(0);
	visu.draw_image(151, 0, temp_img);

	
	auto render = buttonTest.render();
	
	main_disp.resize(1000, 500);
    main_disp.display(render);
	
	int wheel = main_disp.wheel();

	while (!main_disp.is_closed())
	{
		std::this_thread::sleep_for(10ms);		
		if(main_disp.is_resized()) {
            main_disp.resize(false);
            buttonTest.resize({main_disp.width(), main_disp.height()});
            std::cerr << "resize : " << main_disp.width() << ',' << main_disp.height() << std::endl;
        }
        
        if(wheel != main_disp.wheel())
        {
            if(main_disp.is_keyCTRLLEFT() || main_disp.is_keyCTRLRIGHT())
            {
                // Zoom event
                ZoomEvent e{main_disp.wheel() - wheel};
                wheel = main_disp.wheel();
                Event ev;
                ev.first = dim_t{main_disp.mouse_x(), main_disp.mouse_y()};
                ev.second = e;
                buttonTest.propagateEvent(ev);
            }
            else
            {
                // Scroll event
                ScrollEvent e{main_disp.wheel() - wheel};
                wheel = main_disp.wheel();
                Event ev;
                ev.first = dim_t{main_disp.mouse_x(), main_disp.mouse_y()};
                ev.second = e;
                buttonTest.propagateEvent(ev);
            }
        }
        main_disp.display(buttonTest.render());

		//main_disp.resize(render).display(render);

	}	

	return 0;

    //! test affichage simpliste
	*/

	
	//code intéressant sur les recherches d'intervalle (kd tree)
				//const auto y_it = --std::upper_bound(buttonCoordinates_.y.begin(), buttonCoordinates_.y.end(), event.pos.y);
				//const auto buttonNumber = std::distance(buttonCoordinates_.y.begin(), y_it);

				//const Event event_offset = { {event.pos.x,event.pos.y - *y_it},event.event };
				//if (buttons_[buttonNumber].propagateEvent(event_offset)) return true;

				//const Event fake_event = { { -1 , -1 }, event.event };
				//for (size_t i = 0; i < buttons_.size() && i != buttonNumber; ++i)
				//{
				//	if (buttons_[i].propagateEvent(fake_event)) return true;
				//}


    //---------------------------------------------------------------------------------------------------------------
    //menu console prototype

    bool quit = false;
    
    while(!quit) {
        //menu();
        //int c = choix(6);
		int c = cimg::dialog("Menu principal", "Choisissez l'action à effectuer."
											 , "Voir tag d'une image"
											 , "Tagger une image"
											 , "Détagger une image"
											 , "Rechercher par tag"
											 , "Ajouter à la liste"
											 , nullptr
											 , CImg<>());
        switch(c)
        {
            case 0 :
                {
                    std::cout << "Quelle image ?" << std::endl;
                    auto img = choix_image(collection);
                    if(img != collection.end())
                    {
                        affTags(img->getTagList());
                    }
                }
                break;

            case 1 :
                {
                    std::cout << "Quelle image ?" << std::endl;
                    auto img = choix_image(collection);
                    if(img != collection.end())
                    {
                        std::cout << "Quel Tag ?" << std::endl;
                        auto tag = choix_tag(possibleTags);
                        if(!tag.empty())
                        {
                            img->getTagList().insert(tag);
                        }
                    }
                }
                break;

            case 2 :
                {
                    std::cout << "Quelle image ?" << std::endl;
                    auto img = choix_image(collection);
                    if(img != collection.end())
                    {
                        std::cout << "Quel Tag ?" << std::endl;
                        auto tag = choix_tag(img->getTagList());
                        if(!tag.empty())
                        {
                            img->getTagList().erase(tag);
                        }
                    }
                }
                break;

            case 3 :
                {
                    std::cout << "Quel Tag ?" << std::endl;
                    auto tag = choix_tag(possibleTags);
                    auto filtre = FilteredCollection<Image>(collection, [&tag](const Image& img)
                    {
                        return img.getTagList().find(tag) != img
                                                             .getTagList().
                                                             end();
                    });
                    listImg(filtre);
                }
                break;

            case 4 :
                {
                    Tag tag;
                    std::cout << "Saississez un tag" << std::endl;
                    std::cin >> tag;
                    possibleTags.insert(tag);
                }
                break;

            case -1 :
				{
					quit = true;
					auto savePath = getSaveFileName();
					saveCollec(savePath, collection);
				}
                break;
            default :
                break;
        }
    }
    
	fs::current_path(wd);
    saveTagList(tagsPath, possibleTags);
    
    return 0;*/
